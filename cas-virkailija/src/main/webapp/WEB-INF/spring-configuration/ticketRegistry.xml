<?xml version="1.0" encoding="UTF-8"?>
<!--

Licensed to Jasig under one or more contributor license
agreements. See the NOTICE file distributed with this work
for additional information regarding copyright ownership.
Jasig licenses this file to you under the Apache License,
Version 2.0 (the "License"); you may not use this file
except in compliance with the License. You may obtain a
copy of the License at the following location:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the
specific language governing permissions and limitations
under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">
    <description>
        Configuration for the EhCache TicketRegistry which stores the tickets in a distributed EhCache and cleans
        them out as specified intervals.
    </description>

    <bean id="ticketRegistryCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:${cas.ehcache.config.file:ehcache-replicated.xml}" />
        <property name="shared" value="false" />
        <property name="cacheManagerName" value="ticketRegistryCacheManager" />
    </bean>

    <bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.EhCacheTicketRegistry"
          p:serviceTicketsCache-ref="serviceTicketsCacheBean" p:ticketGrantingTicketsCache-ref="ticketGrantingTicketsCacheBean" />

    <bean id="abstractTicketCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean"
          abstract="true">
        <property name="cacheManager" ref="ticketRegistryCacheManager" />
        <property name="diskExpiryThreadIntervalSeconds" value="0" />
        <property name="diskPersistent" value="false" />
        <property name="eternal" value="false" />
        <property name="maxElementsInMemory" value="100000" />
        <property name="maxElementsOnDisk" value="0" />
        <property name="memoryStoreEvictionPolicy" value="LRU" />
        <property name="overflowToDisk" value="true" />
        <property name="bootstrapCacheLoader">
            <ref local="ticketCacheBootstrapCacheLoader" />
        </property>
    </bean>

    <bean id="serviceTicketsCacheBean" class="org.springframework.cache.ehcache.EhCacheFactoryBean"
          parent="abstractTicketCache">
        <description>
            Service Tickets (ST) and Proxy Tickets are only valid for short amount of time (default is 10 seconds),
            and
            most often are removed from the cache when the ST is validated. The ST cache must be replicated
            quickly
            since validation is expected within a few second after its creation. The CAS instance validating the
            ST may
            not be one that created the ST, since validation is a back-channel service-to-CAS call that is not
            aware of
            user session affinity. Synchronous mode is used to ensure all CAS nodes can validate the ST.
        </description>
        <property name="cacheName" value="serviceTicketsCache" />

        <property name="cacheEventListeners" ref="ticketRMISynchronousCacheReplicator"/>
        <!--
            <ref local="ticketRMISynchronousCacheReplicator" />
        </property>
        -->

        <!-- The maximum number of seconds an element can exist in the cache without being accessed. The
    element expires at this limit and will no longer be returned from the cache. The default value is 0,
    which means no TTI eviction takes place (infinite lifetime). -->
        <property name="timeToIdle" value="0" />

        <!-- The maximum number of seconds an element can exist in the cache regardless of use. The element
    expires at this limit and will no longer be returned from the cache. The default value is 0, which means
    no TTL eviction takes place (infinite lifetime). -->
        <property name="timeToLive" value="300" />
    </bean>

    <!-- HUOM! poiketen alkuperäisestä, myös TGT cachen pitää olla synchronous ja periä abstractTicketCache, muuten ruvetaa saamaan
    java.lang.NullPointerException at net.sf.ehcache.distribution.RMISynchronousCacheReplicator.listRemoteCachePeers(RMISynchronousCacheReplicator.java:335) -->
    <bean id="ticketGrantingTicketsCacheBean" class="org.springframework.cache.ehcache.EhCacheFactoryBean"
          parent="abstractTicketCache">
        <description>
            Ticket Granting Tickets (TGT) are valid for the lifetime of the SSO Session. They become invalid either
            by expiration policy (default 2 hours idle, 8 hours max) or by explicit user sign off via
            /cas/login.
            The TGT cache can be replicated slowly because TGT are only manipulated via web user started
            operations
            (mostly grant service ticket) and thus benefit of web session affinity.
        </description>

        <property name="cacheName" value="ticketGrantingTicketsCache" />

        <property name="cacheEventListeners">
            <ref local="ticketRMISynchronousCacheReplicator" />
        </property>

        <!-- The maximum number of seconds an element can exist in the cache regardless of use. The element
    expires at this limit and will no longer be returned from the cache. The default value is 0, which means
    no TTL eviction takes place (infinite lifetime). For this sample configuration, 2 hours of inactivity
    before ticket granting tickets are expired automatically -->

        <property name="timeToIdle" value="7201" />

        <!-- The maximum number of seconds an element can exist in the cache without being accessed. The
    element expires at this limit and will no longer be returned from the cache. The default value is 0,
    which means no TTI eviction takes place (infinite lifetime). -->
        <property name="timeToLive" value="0" />
    </bean>

    <bean id="ticketRMISynchronousCacheReplicator" class="net.sf.ehcache.distribution.RMISynchronousCacheReplicator">
        <constructor-arg name="replicatePuts" value="true" type="boolean" />
        <constructor-arg name="replicatePutsViaCopy" value="true" type="boolean" />
        <constructor-arg name="replicateUpdates" value="true" type="boolean" />
        <constructor-arg name="replicateUpdatesViaCopy" value="true" type="boolean" />
        <constructor-arg name="replicateRemovals" value="true" type="boolean" />
    </bean>

    <bean id="ticketCacheBootstrapCacheLoader" class="net.sf.ehcache.distribution.RMIBootstrapCacheLoader">
        <constructor-arg name="asynchronous" value="true" />
        <constructor-arg name="maximumChunkSize" value="5000000" />
    </bean>

</beans>