<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.
	| The beans declared in this file are instantiated at context initialization time by the Spring
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
       ">
    <!-- TODO: jaxws added by oph/antti -->
    <!--
         | This bean declares our AuthenticationManager.  The CentralAuthenticationService service bean
         | declared in applicationContext.xml picks up this AuthenticationManager by reference to its id,
         | "authenticationManager".  Most deployers will be able to use the default AuthenticationManager
         | implementation and so do not need to change the class of this bean.  We include the whole
         | AuthenticationManager here in the userConfigContext.xml so that you can see the things you will
         | need to change in context.
         +-->
    <bean id="authenticationManager"
          class="fi.vm.sade.auth.ldap.SynchronizedAuthenticationManager">

        <!-- Uncomment the metadata populator to allow clearpass to capture and cache the password
               This switch effectively will turn on clearpass. -->
          <property name="authenticationMetaDataPopulators">
             <list>
                <!-- antti: facebook/oauth, tämä pois koska koko property oli pois alunperin
                 <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator">
                   <constructor-arg index="0" ref="credentialsCache" />
                </bean>
                -->
                 <!-- antti: facebook/oauth -->
                 <bean class="org.jasig.cas.support.oauth.authentication.OAuthAuthenticationMetaDataPopulator" />
             </list>
          </property>
           <!-- -->

        <!--
              | This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate.
              | The AuthenticationManagerImpl considers them in order, finding a CredentialToPrincipalResolver which
              | supports the presented credentials.
              |
              | AuthenticationManagerImpl uses these resolvers for two purposes.  First, it uses them to identify the Principal
              | attempting to authenticate to CAS /login .  In the default configuration, it is the DefaultCredentialsToPrincipalResolver
              | that fills this role.  If you are using some other kind of credentials than UsernamePasswordCredentials, you will need to replace
              | DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver that supports the credentials you are
              | using.
              |
              | Second, AuthenticationManagerImpl uses these resolvers to identify a service requesting a proxy granting ticket.
              | In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver that serves this purpose.
              | You will need to change this list if you are identifying services by something more or other than their callback URL.
              +-->
        <property name="credentialsToPrincipalResolvers">
            <list>
                <!--
                        | UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials that we use for /login
                        | by default and produces SimplePrincipal instances conveying the username from the credentials.
                        |
                        | If you've changed your LoginFormAction to use credentials other than UsernamePasswordCredentials then you will also
                        | need to change this bean declaration (or add additional declarations) to declare a CredentialsToPrincipalResolver that supports the
                        | Credentials you are using.
                        +-->
                <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" >
                    <property name="attributeRepository" ref="attributeRepository" />
                </bean>
                <!--
                        | HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
                        | authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a
                        | SimpleService identified by that callback URL.
                        |
                        | If you are representing services by something more or other than an HTTPS URL whereat they are able to
                        | receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
                        +-->
                <bean
                        class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />

                <!-- antti: facebook/oauth -->
                <bean class="org.jasig.cas.support.oauth.authentication.principal.OAuthCredentialsToPrincipalResolver" />
                <bean class="fi.vm.sade.saml.action.SAMLCredentialsToPrincipalResolver" />

            </list>
        </property>

        <!--
              | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate,
              | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
              | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
              | until it finds one that both supports the Credentials presented and succeeds in authenticating.
              +-->
        <property name="authenticationHandlers">
            <list>
                <bean class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler"
                      p:filter="${ldap.filter.people}"
                      p:searchBase="${ldap.search.base.people}"
                      p:contextSource-ref="contextSource">
                </bean>

                <bean class="fi.vm.sade.auth.ldap.CustomOAuthAuthenticationHandler">
                    <property name="configuration" ref="oauthConfig" />
                    <property name="ldapUserImporter" ref="ldapUserImporter"/>
                </bean>

                <bean class="fi.vm.sade.saml.action.SAMLAuthenticationHandler">
                    <property name="authenticationUtil" ref="authenticationUtil"/>
                </bean>
            </list>
        </property>
    </bean>

    <jaxws:client id="organisaatioService"
                  serviceClass="fi.vm.sade.organisaatio.api.model.OrganisaatioService"
                  address="${organisaatio.webservice.url.backend}"/>
    <jaxws:client id="authenticationService"
                  serviceClass="fi.vm.sade.authentication.service.AuthenticationService"
                  address="${authentication.webservice.url.backend}"/>
    <jaxws:client id="customAttributeService"
                  serviceClass="fi.vm.sade.authentication.service.CustomAttributeService"
                  address="${customAttribute.webservice.url.backend}" />

    <!--
     This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
     More robust deployments will want to use another option, such as the Jdbc version.

     The name of this should remain "userDetailsService" in order for Spring Security to find it.
      -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

    <sec:user-service id="userDetailsService">
        <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />
    </sec:user-service>

    <!--
     Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
     may go against a database or LDAP server.  The id should remain "attributeRepository" though.
      -->
    <bean id="attributeRepository"
          class="org.jasig.services.persondir.support.StubPersonAttributeDao">
        <property name="backingMap">
            <map>
                <entry key="uid" value="uid" />
                <entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
                <entry key="groupMembership" value="groupMembership" />
            </map>
        </property>
    </bean>

    <!--
     Sample, in-memory data store for the ServiceRegistry. A real implementation
     would probably want to replace this with the JPA-backed ServiceRegistry DAO
     The name of this bean should remain "serviceRegistryDao".
      -->
    <bean
            id="serviceRegistryDao"
            class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
        <property name="registeredServices">
            <list>

                <!-- antti: facebook/oauth -->
                <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                    <property name="id" value="0"/>
                    <property name="name" value="HTTP"/>
                    <property name="description" value="Only Allows HTTP Urls"/>
                    <property name="serviceId" value="http://**"/>
                    <property name="evaluationOrder" value="10000001"/>
                    <property name="allowedAttributes">
                        <list>
                            <!-- facebook -->
                            <value>name</value>
                            <value>first_name</value>
                            <value>middle_name</value>
                        </list>
                    </property>
                </bean>

                <bean class="org.jasig.cas.services.RegexRegisteredService">
                    <property name="id" value="0" />
                    <property name="name" value="HTTP and IMAP" />
                    <property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />
                    <property name="serviceId" value="^(https?|imaps?)://.*" />
                    <property name="evaluationOrder" value="10000001" />
                </bean>
            </list>
        </property>
    </bean>

    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

    <bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
        <property name="monitors">
            <list>
                <bean class="org.jasig.cas.monitor.MemoryMonitor"
                      p:freeMemoryWarnThreshold="10" />
                <!--
                  NOTE
                  The following ticket registries support SessionMonitor:
                    * DefaultTicketRegistry
                    * JpaTicketRegistry
                  Remove this monitor if you use an unsupported registry.
                -->
                <bean class="org.jasig.cas.monitor.SessionMonitor"
                      p:ticketRegistry-ref="ticketRegistry"
                      p:serviceTicketCountWarnThreshold="5000"
                      p:sessionCountWarnThreshold="100000" />
            </list>
        </property>
    </bean>

    <!-- antti -->
    <!-- TODO: optimointi, ldap poolaus? ei bind operaatioille.. -->
    <bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
        <!-- DO NOT enable JNDI pooling for context sources that perform LDAP bind operations. -->
        <property name="pooled" value="false"/>

        <!--
          Although multiple URLs may defined, it's strongly recommended to avoid this configuration
          since the implementation attempts hosts in sequence and requires a connection timeout
          prior to attempting the next host, which incurs unacceptable latency on node failure.
          A proper HA setup for LDAP directories should use a single virtual host that maps to multiple
          real hosts using a hardware load balancer.
        -->
        <property name="url" value="${ldap.url}" />

        <!--
          Manager credentials are only required if your directory does not support anonymous searches.
          Never provide these credentials for FastBindLdapAuthenticationHandler since the user's
          credentials are used for the bind operation.
        -->
        <property name="userDn" value="${ldap.manager.userdn}"/>
        <property name="password" value="${ldap.manager.password}"/>

        <!-- Place JNDI environment properties here. -->
        <property name="baseEnvironmentProperties">
            <map>
                <!-- Three seconds is an eternity to users. -->
                <entry key="com.sun.jndi.ldap.connect.timeout" value="3000" />
                <entry key="com.sun.jndi.ldap.read.timeout" value="3000" />

                <!-- Explained at http://download.oracle.com/javase/1.3/docs/api/javax/naming/Context.html#SECURITY_AUTHENTICATION -->
                <entry key="java.naming.security.authentication" value="simple" />
            </map>
        </property>
    </bean>

    <bean id="ldapUserImporter" class="fi.vm.sade.auth.ldap.LdapUserImporter" scope="singleton" init-method="init" lazy-init="false">
        <property name="contextSource" ref="contextSource"/>
        <property name="ldapTemplate" ref="ldapTemplate"/>
    </bean>

    <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
        <constructor-arg ref="contextSource" />
    </bean>

    <!-- antti: facebook/oauth -->
    <!-- lisää providereja mm twitter: https://wiki.jasig.org/display/CASUM/OAuth+client+support+for+CAS+server+version+%3E%3D+3.5.1 -->
    <!-- TODO: fb:tä ei vielä oikeesti tarvita -->
    <bean id="facebook" class="org.scribe.up.provider.impl.FacebookProvider" >
        <property name="key" value="170316963092491" />
        <property name="secret" value="0be9e359d6989bf4cd28e40266535e2e" />
        <!-- xTODO: callbackUrl hack?  -->
        <!--<property name="callbackUrl" value="http://localhost:8080/cas/login?oauth_provider=FacebookProvider"/>-->
    </bean>
    <bean id="oauthConfig" class="org.jasig.cas.support.oauth.OAuthConfiguration">
        <property name="loginUrl" value="${server.prefix}/login" />
        <property name="providers">
            <list>
                <ref bean="facebook" />
            </list>
        </property>
    </bean>

    <bean id="authenticationUtil" class="fi.vm.sade.AuthenticationUtil">
        <property name="ldapUserImporter" ref="ldapUserImporter"/>
        <property name="authenticationServiceWsdlUrl" value="${authentication.service.wsdl.url}"/>
        <property name="rootOrganisaatioOid" value="${root.organisaatio.oid}"/>
        <property name="organisaatioService" ref="organisaatioService"/>
        <property name="authenticationService" ref="authenticationService" />
        <property name="customAttributeService" ref="customAttributeService" />
        <property name="useAuthenticationService" value="${cas.use.authentication.service:1}" />
    </bean>

</beans>
