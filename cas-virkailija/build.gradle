import org.apache.tools.ant.taskdefs.condition.*
import org.gradle.internal.logging.text.*
import org.apereo.cas.metadata.*
import java.nio.file.*
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
    repositories {
        if (project.privateRepoUrl) {
          maven {
            url project.privateRepoUrl
            credentials {
              username = project.privateRepoUsername
              password = System.env.PRIVATE_REPO_TOKEN
            }
          }
        }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${project.gradleDependencyManagementPluginVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"

        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-core-configuration-metadata-repository:${project.'cas.version'}"
    }
}

repositories {
    if (project.privateRepoUrl) {
      maven {
        url project.privateRepoUrl
        credentials {
          username = project.privateRepoUsername
          password = System.env.PRIVATE_REPO_TOKEN
        }
      }
    }
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
    maven {
        mavenContent { snapshotsOnly() }
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
    }
    maven {
        url "https://artifactory.opintopolku.fi/artifactory/oph-sade-snapshot-local"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "https://artifactory.opintopolku.fi/artifactory/oph-sade-release-local"
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        mavenContent { snapshotsOnly() }
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
    }
}
def casServerVersion = project.'cas.version'
def casWebApplicationBinaryName = "cas.war"

project.ext."casServerVersion" = casServerVersion
project.ext."casWebApplicationBinaryName" = casWebApplicationBinaryName

apply plugin: "io.spring.dependency-management"
apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/jib.gradle")
apply from: rootProject.file("gradle/tasks.gradle")
apply from: rootProject.file("gradle/buildversion.gradle")

dependencyManagement {
    imports {
        mavenBom "org.apereo.cas:cas-server-support-bom:${project.'cas.version'}"
    }
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"
        preferProjectModules()
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("//etc/cas/templates/"), new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility)
    }
}

bootBuildImage {
    imageName = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'


    /**
     * CAS dependencies and modules may be listed here.
     *
     * There is no need to specify the version number for each dependency
     * since versions are all resolved and controlled by the dependency management
     * plugin via the CAS bom.
     **/
    implementation "org.apereo.cas:cas-server-webapp${project.appServer}"
    // Other CAS dependencies/modules may be listed here...
    implementation "org.apereo.cas:cas-server-support-rest"
    implementation "org.apereo.cas:cas-server-support-session-jdbc"
    implementation "org.apereo.cas:cas-server-support-throttle-core"
    implementation "org.apereo.cas:cas-server-support-interrupt-api"
    implementation "org.apereo.cas:cas-server-support-interrupt-core"
    implementation "org.apereo.cas:cas-server-support-interrupt-webflow"
    implementation "org.apereo.cas:cas-server-core-authentication-api"
    implementation "org.apereo.cas:cas-server-core-authentication-attributes"
    implementation "org.apereo.cas:cas-server-core-authentication-throttle"
    implementation "org.apereo.cas:cas-server-core-webflow-api"
    implementation "org.apereo.cas:cas-server-core-web-api"
    implementation "org.apereo.cas:cas-server-core-tickets-api"
    implementation "org.apereo.cas:cas-server-core-services-api"
    implementation "org.apereo.cas:cas-server-core-services-authentication"
    implementation "org.apereo.cas:cas-server-core-util-api"
    implementation "org.apereo.cas:cas-server-webapp-config"
    implementation "org.apereo.cas:cas-server-webapp-init"
    implementation 'com.github.kagkarlsson:db-scheduler:11.0'
    implementation "fi.vm.sade.java-utils:java-http:0.5.0-SNAPSHOT"
    implementation "org.flywaydb:flyway-core:5.2.4"
    runtimeOnly 'org.postgresql:postgresql:42.3.3'
    implementation "org.springframework.security:spring-security-config:5.2.15.RELEASE"
    implementation "fi.vm.sade.java-utils:java-http:0.5.0-SNAPSHOT"
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    compileOnly 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.webjars:bootstrap:5.1.3'
    testImplementation "org.apereo.cas:cas-server-core-services-registry"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.springframework:spring-test:5.3.18'

    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-webapp-init"

    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                project.name == "cas-server-core-${it}" || project.name == "cas-server-support-${it}"
            }
            projectsToAdd.each {implementation it}
        }
    }



    
    
    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
}

