buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        classpath "com.boazj.gradle:gradle-log-plugin:${project.gradleLogVersion}"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases/" }
    maven { url "https://repo.spring.io/milestone/" }
    maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
    maven {
        url "https://artifactory.opintopolku.fi/artifactory/oph-sade-snapshot-local"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "https://artifactory.opintopolku.fi/artifactory/oph-sade-release-local"
        mavenContent {
            releasesOnly()
        }
    }
}

def casServerVersion = project.'cas.version'
def casWebApplicationBinaryName = "cas.war"

project.ext."casServerVersion" = casServerVersion
project.ext."casWebApplicationBinaryName" = casWebApplicationBinaryName

apply from: rootProject.file("gradle/waroverlay.gradle")
apply from: rootProject.file("gradle/tasks.gradle")
apply from: rootProject.file("gradle/buildversion.gradle")

apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "com.google.cloud.tools.jib"

dependencies {
    compile "org.apereo.cas:cas-server-webapp${project.appServer}:${casServerVersion}"
    // Other CAS dependencies/modules may be listed here...
    compile "org.apereo.cas:cas-server-core-api-services:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-api-configuration-model:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-cookie-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-services-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-services-authentication:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-tickets-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-authentication-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-authentication-attributes:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-util-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-web-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-core-webflow-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-documentation-swagger:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-generic:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-pac4j-authentication:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-pac4j-core:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-pac4j-core-clients:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-pac4j-webflow:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-session-jdbc:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-interrupt-api:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-interrupt-core:${casServerVersion}"
    compile "org.apereo.cas:cas-server-support-interrupt-webflow:${casServerVersion}"
    compile "org.apereo.cas:cas-server-webapp-config:${casServerVersion}"
    compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.9"
    compile "com.github.kagkarlsson:db-scheduler:6.2"
    compile "org.flywaydb:flyway-core:5.2.4"
    compile "org.opensaml:opensaml-core:3.4.0"
    compile "org.pac4j:pac4j-core:3.6.1"
    compile("org.pac4j:pac4j-saml:3.6.1") {
        exclude(group: "ch.qos.logback", module: "logback-classic")
    }
    compile "org.postgresql:postgresql:42.2.5"
    compile "org.springframework.security:spring-security-config:5.1.2.RELEASE"
    compile "fi.vm.sade.java-utils:java-http:0.5.0-SNAPSHOT"
    compile "fi.vm.sade.java-utils:suomifi-valtuudet-client:0.1.0-SNAPSHOT"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: '2.15.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.0"
    testImplementation 'org.assertj:assertj-core:3.14.0'
}

tasks.findByName("jibDockerBuild")
    .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
    .finalizedBy(deleteWebAppFromJib)

configurations.all {

    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"

        preferProjectModules()
        force 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
        force 'com.fasterxml.jackson.core:jackson-core:2.9.8'
        force 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

test {
    useJUnitPlatform()
}

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

war {
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
}

springBoot {
    mainClassName = "org.apereo.cas.web.CasWebApplication"
}

bootWar {
    doFirst {
        def executable = project.hasProperty("executable") && Boolean.valueOf(project.getProperty("executable"))
        if (executable) {
            logger.info "Including launch script for executable WAR artifact"
            launchScript()
        } else {
            logger.info "WAR artifact is not marked as an executable"
        }
        archiveName "${casWebApplicationBinaryName}"
        baseName "cas"
        excludeDevtools = true
    }
}

bootRun {
    sourceResources sourceSets.main
    classpath = sourceSets.main.runtimeClasspath
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = "${project.gradleVersion}"
}

jib {
    from {
        image = project.baseDockerImage
    }
    to {
        image = "${project.group}/${project.name}"
        /**
         ecr-login: Amazon Elastic Container Registry (ECR)
         gcr: Google Container Registry (GCR)
         osxkeychain: Docker Hub
         */
        credHelper = "osxkeychain"
        /**
        auth {
            username = "*******"
            password = "*******"
        }
        tags = [casServerVersion]
        */
    }
    container {
        useCurrentTimestamp = true
        entrypoint = ['docker/entrypoint.sh']
        ports = ['80', '443', '8080', '8443']
        labels = [version:casServerVersion, name:project.name, group:project.group]
    }
    extraDirectory {
        path = file('src/main/jib')
        permissions = [
            '/docker/entrypoint.sh': '755'
        ]
    }
}

